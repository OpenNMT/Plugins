<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Sdl.Core.Processing.Alignment.Common</name>
    </assembly>
    <members>
        <member name="T:Sdl.Core.Processing.Alignment.Common.AlignmentMode">
            <summary>
            Represents the different modes of alignment. Alignment modes are used to 
            choose the most appropriate algorithm internally. They differ in performance and quality and 
            different alignment modes may perform best depending upon the specific input data.
            </summary>
        </member>
        <member name="F:Sdl.Core.Processing.Alignment.Common.AlignmentMode.Fast">
            <summary>
            Uses a fast alignment algorithm which takes less memory and may be less accurate.
            </summary>
        </member>
        <member name="F:Sdl.Core.Processing.Alignment.Common.AlignmentMode.Accurate">
            <summary>
            Uses an alignment algorithm that is slower, takes more memory, but may be more accurate.
            </summary>
        </member>
        <member name="F:Sdl.Core.Processing.Alignment.Common.AlignmentMode.Optimistic">
            <summary>
            Uses an alignment algorithm which assumes that the files are closely translated (i.e. are
            parallel or near-parallel) and there are a high number of 1:1 correspondences in the files.
            </summary>
        </member>
        <member name="F:Sdl.Core.Processing.Alignment.Common.AlignmentMode.Automatic">
            <summary>
            Uses an alignment algorithm which is chosen internally, depending on clues derived from the input data.
            </summary>
        </member>
        <member name="F:Sdl.Core.Processing.Alignment.Common.AlignmentMode.Version1">
            <summary>
            Version one of the alignment algorithm.
            </summary>
        </member>
        <member name="F:Sdl.Core.Processing.Alignment.Common.AlignmentMode.Version2">
            <summary>
            Recommended: Version two of the alignment slgorithm - improved anchoring strategies, 
            statistically the best mix of cost computers, fast and delivers high alignment quality.
            </summary>
        </member>
        <member name="T:Sdl.Core.Processing.Alignment.Common.AlignmentQuality">
            <summary>
            AlignmentQuality enumeration represents the relative alignment quality (based on alignment cost).
            </summary>
        </member>
        <member name="F:Sdl.Core.Processing.Alignment.Common.AlignmentQuality.Good">
            <summary>
            Relative quality indicator - top 33% alignments (based on alignment cost) will be classified as good.
            </summary>
        </member>
        <member name="F:Sdl.Core.Processing.Alignment.Common.AlignmentQuality.Average">
            <summary>
            Relative quality indicator - middle 33% alignments (based on alignment cost) will be classified as average.
            </summary>
        </member>
        <member name="F:Sdl.Core.Processing.Alignment.Common.AlignmentQuality.Bad">
            <summary>
            Relative quality indicator - bottom 33% alignments (based on alignment cost) will be classified as bad.
            </summary>
        </member>
        <member name="T:Sdl.Core.Processing.Alignment.Common.AlignmentSettings">
            <summary>
            AlignmentSettings class which represents the alignment settings used by the alignment serviceto to align two documents.
            </summary>
        </member>
        <member name="M:Sdl.Core.Processing.Alignment.Common.AlignmentSettings.#ctor(System.Globalization.CultureInfo,System.Globalization.CultureInfo)">
            <summary>
            Constructor that takes the given left culture and right culture.
            </summary>
            <param name="leftCulture">left culture</param>
            <param name="rightCulture">right culture</param>
        </member>
        <member name="P:Sdl.Core.Processing.Alignment.Common.AlignmentSettings.LeftCulture">
            <summary>
            LeftCulture property represents the culture for the left alignment file.
            </summary>
        </member>
        <member name="P:Sdl.Core.Processing.Alignment.Common.AlignmentSettings.RightCulture">
            <summary>
            RightCulture property represents the culture for the right alignment file.
            </summary>
        </member>
        <member name="P:Sdl.Core.Processing.Alignment.Common.AlignmentSettings.AlignmentMode">
            <summary>
            AlignmentMode property represents the algorithm to be used on the alignment.
            </summary>
        </member>
        <member name="P:Sdl.Core.Processing.Alignment.Common.AlignmentSettings.ResourceDataAccessor">
            <summary>
            ResourceDataAccessor property represents the resource data accessor used during segmentation of left and right files.
            </summary>
        </member>
        <member name="P:Sdl.Core.Processing.Alignment.Common.AlignmentSettings.MinimumAlignmentQuality">
            <summary>
            MinimumAlignmentQuality property represents the minimum alignment quality percentage for which aligned segments will be processed.
            Only segments corresponding to alignments with quality higher than MinimumAlignmentQuality will be exported and passed along to the bilingual processors.
            </summary>
        </member>
        <member name="P:Sdl.Core.Processing.Alignment.Common.AlignmentSettings.BilingualDictionary">
            <summary>
            BilingualDictionary property represents the bilingual dictionary used during alignment (used for AccurateAlgorithm).
            </summary>
        </member>
        <member name="P:Sdl.Core.Processing.Alignment.Common.AlignmentSettings.UpdateBilingualDictionary">
            <summary>
            UpdateBilingualDictionary property determines whether the bilingual dictionary can be updated during alignment (used for AccurateAlgorithm).
            </summary>
        </member>
        <member name="P:Sdl.Core.Processing.Alignment.Common.AlignmentSettings.TmPath">
            <summary>
            Path to the TM received in the Align call - optional
            </summary>
        </member>
        <member name="T:Sdl.Core.Processing.Alignment.Common.AlignmentStatistics">
            <summary>
            AlignmentStatistics class represents alignment process statistics.
            </summary>
        </member>
        <member name="M:Sdl.Core.Processing.Alignment.Common.AlignmentStatistics.#ctor(System.Int32,System.Int32,System.Int32,System.Collections.Generic.IDictionary{Sdl.Core.Processing.Alignment.Common.AlignmentQuality,System.Int32},System.Collections.Generic.IDictionary{Sdl.Core.Processing.Alignment.Common.AlignmentType,System.Int32})">
            <summary>
            Constructor that takes the given counts.
            </summary>
            <param name="sourceSegmentsCount">number of segments in the left file</param>
            <param name="targetSegmentsCount">number of segments in the right file</param>
            <param name="totalAlignmentsCount">number of generated alignments</param>
            <param name="alignmentsCountByQuality">dictionary of alignments count by quality</param>
            <param name="alignmentsCountByType">dictionary of alignment count by alignment type</param>
        </member>
        <member name="M:Sdl.Core.Processing.Alignment.Common.AlignmentStatistics.IsValid``1(System.Collections.Generic.IDictionary{``0,System.Int32})">
            <summary>
            Determines whether the given alignments count dictionary is valid.
            </summary>
            <param name="alignmentsCountDictionary">alignments count dictionary</param>
            <returns>whether alignments count dictionary is valid</returns>
        </member>
        <member name="M:Sdl.Core.Processing.Alignment.Common.AlignmentStatistics.GetAlignmentsCount(Sdl.Core.Processing.Alignment.Common.AlignmentQuality)">
            <summary>
            Gets the number of alignments with the given alignment quality.
            </summary>
            <param name="alignmentQuality">alignment quality</param>
            <returns>number of alignments with the given alignment quality</returns>
        </member>
        <member name="M:Sdl.Core.Processing.Alignment.Common.AlignmentStatistics.GetAlignmentsCount(Sdl.Core.Processing.Alignment.Common.AlignmentType)">
            <summary>
            Gets the number of alignments with the given alignment type.
            </summary>
            <param name="alignmentType">alignment type</param>
            <returns>number of alignments with the given alignment type</returns>
        </member>
        <member name="P:Sdl.Core.Processing.Alignment.Common.AlignmentStatistics.SourceSegmentsCount">
            <summary>
            SourceSegmentsCount property represents the number of source segments.
            </summary>
        </member>
        <member name="P:Sdl.Core.Processing.Alignment.Common.AlignmentStatistics.TargetSegmentsCount">
            <summary>
            SourceSegmentsCount property represents the number of target segments.
            </summary>
        </member>
        <member name="P:Sdl.Core.Processing.Alignment.Common.AlignmentStatistics.TotalAlignmentsCount">
            <summary>
            TotalAlignmentsCount property represents the total number of alignments.
            </summary>
        </member>
        <member name="T:Sdl.Core.Processing.Alignment.Common.AlignmentType">
            <summary>
            AlignmentTypes enumeration represents all the alignment types.
            </summary>
        </member>
        <member name="F:Sdl.Core.Processing.Alignment.Common.AlignmentType.Invalid">
            <summary>
            Status representing an invalid alignment type
            </summary>
        </member>
        <member name="F:Sdl.Core.Processing.Alignment.Common.AlignmentType.Alignment01">
            <summary>
            Insertion - a segment was added in the right document, without a corresponding segment in the left document.
            </summary>
        </member>
        <member name="F:Sdl.Core.Processing.Alignment.Common.AlignmentType.Alignment10">
            <summary>
            Deletion - a segment in the left document has no correspondent in the right document.
            </summary>
        </member>
        <member name="F:Sdl.Core.Processing.Alignment.Common.AlignmentType.Alignment11">
            <summary>
            Substitution - a segment in the left document has a correspondent on the right document.
            </summary>
        </member>
        <member name="F:Sdl.Core.Processing.Alignment.Common.AlignmentType.Alignment12">
            <summary>
            Expansion - a single segment in the left document has 2 corresponding segments in the right document.
            </summary>
        </member>
        <member name="F:Sdl.Core.Processing.Alignment.Common.AlignmentType.Alignment21">
            <summary>
            Contraction - two segments in the left document correspond to a single segment in the right document.
            </summary>
        </member>
        <member name="F:Sdl.Core.Processing.Alignment.Common.AlignmentType.Alignment22">
            <summary>
            Melding - two segments in the left document correspond together to two other segments in the right document.
            </summary>
        </member>
        <member name="F:Sdl.Core.Processing.Alignment.Common.AlignmentType.Alignment13">
            <summary>
            1 to 3 alignment - introduced and supported only for AlignmentEditor, manual alignments;
            no alignment algorithm will automatically produce alignments higher than 2-2.
            </summary>
        </member>
        <member name="F:Sdl.Core.Processing.Alignment.Common.AlignmentType.Alignment31">
            <summary>
            3 to 1 alignment - introduced and supported only for AlignmentEditor, manual alignments;
            no alignment algorithm will automatically produce alignments higher than 2-2.
            </summary>
        </member>
        <member name="T:Sdl.Core.Processing.Alignment.Common.IBilingualDictionary">
            <summary>
            IBilingualDictionary represents a bilingual dictionary. 
            A bilingual dictionary has a source culture and a target culture 
            and contains bilingual entries where each bilingual entry has one source word and many target words. 
            </summary>
        </member>
        <member name="M:Sdl.Core.Processing.Alignment.Common.IBilingualDictionary.GetSourceWords">
            <summary>
            Gets all the source words in the bilingual dictionary.
            </summary>
            <returns>source words</returns>
            <remarks>
            Note to implementors: 
                GetSourceWords must always return an object and not null - even if there are no source words.
            </remarks>
        </member>
        <member name="M:Sdl.Core.Processing.Alignment.Common.IBilingualDictionary.GetTargetWords(System.String)">
            <summary>
            Gets the target words for the given source word.
            </summary>
            <param name="sourceWord">source word</param>
            <returns>target words</returns>
            <remarks>
            Note to implementors:
                GetTargetWords must always return an object and not null - even if there are no target words.
                GetTargetWords should return unique target words - so GetTargetWords("car") should not return "voiture", "voiture".
                A null or empty source word is considered invalid and should throw an argument exception.
            </remarks>
        </member>
        <member name="M:Sdl.Core.Processing.Alignment.Common.IBilingualDictionary.CanAddEntry(System.String,System.String)">
            <summary>
            Checks if the entry can be added to the dictionary.
            </summary>
            <param name="sourceWord">source word</param>
            <param name="targetWord">target word</param>
            <returns>True if entry can be added.</returns>
        </member>
        <member name="M:Sdl.Core.Processing.Alignment.Common.IBilingualDictionary.AddEntry(System.String,System.String)">
            <summary>
            Adds an entry with the given source word and target word.
            </summary>
            <param name="sourceWord">source word</param>
            <param name="targetWord">target word</param>
            <remarks>
            Before calling this method, check that the entry can be added using CanAddEntry otherwise 
            this method will throw an ArgumentException.
            
            Note to implementors: 
                A null or empty word is considered invalid and should throw an argument exception.
                If a source word already has the given target word then it should do nothing.
                If the bilingual dictionary is read only then this should throw NotSupportedException.
            </remarks>
        </member>
        <member name="P:Sdl.Core.Processing.Alignment.Common.IBilingualDictionary.SourceCulture">
            <summary>
            Gets the source culture.
            </summary>
            <remarks>
            Note to implementors: 
                A bilingual dictionary with a null source culture is considered invalid.
            </remarks>
        </member>
        <member name="P:Sdl.Core.Processing.Alignment.Common.IBilingualDictionary.TargetCulture">
            <summary>
            Gets the target culture.
            </summary>
            <remarks>
            Note to implementors: 
                A bilingual dictionary with a null target culture is considered invalid.
            </remarks>
        </member>
        <member name="P:Sdl.Core.Processing.Alignment.Common.IBilingualDictionary.IsReadOnly">
            <summary>
            Determines whether the bilingual dictionary is read only.
            </summary>
        </member>
    </members>
</doc>
